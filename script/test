#!/bin/bash
#
#  Copyright (c) 2020, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

set -euxo pipefail

# ==============================================================================
# Bash definitions

if [[ -n ${BASH_SOURCE[0]} ]]; then
    script_path="${BASH_SOURCE[0]}"
else
    script_path="$0"
fi
script_dir="$(realpath "$(dirname "${script_path}")")"
repo_dir="$(dirname "${script_dir}")"

# shellcheck source=script/efr32-definitions
source "${repo_dir}/script/efr32-definitions"

readonly OT_OPTIONS=(
    "-DOT_COMPILE_WARNING_AS_ERROR=ON"
    "-DOT_COMMISSIONER=ON"
    "-DOT_DHCP6_CLIENT=ON"
    "-DOT_DHCP6_SERVER=ON"
    "-DOT_DNS_CLIENT=ON"
    "-DOT_JOINER=ON"
    "-DOT_BORDER_ROUTER=ON"
    "-DOT_REFERENCE_DEVICE=ON"
    "-DOT_COAP=ON"
    "-DOT_COAPS=ON"
    "-DOT_LOG_LEVEL_DYNAMIC=ON"
    "-DOT_DIAGNOSTIC=ON"
    "-DOT_FULL_LOGS=ON"
    "-DOT_MAC_FILTER=ON"
)

# List of boards to test
readonly MG21_BOARDS=(
    brd4180a
    brd4180b
    brd4181a
)

readonly MG24_BOARDS=(
    brd4186c
    brd4187c
)

readonly MG26_BOARDS=(
    brd4116a
)

# ==============================================================================

main()
{
    local usage="usage: $0 [-h] [--all-boards]"

    local all_boards=false

    # Parse flags
    optspec=":h-:"
    while getopts "$optspec" optchar; do
        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    all-boards)
                        printf '\n\nSkipping silabs example apps...\n\n' >&2
                        all_boards=true
                        shift 1
                        ;;
                    *)
                        echo "Unknown option --${OPTARG}" >&2
                        exit 2
                        ;;
                esac
                ;;
            h)
                echo "${usage}" >&2
                exit 2
                ;;
        esac
    done

    BOARDS=()
    if [ "${all_boards}" = true ]; then
        BOARDS+=(
            "${MG21_BOARDS[@]}"
            "${MG24_BOARDS[@]}"
            "${MG26_BOARDS[@]}"
        )
    else
        BOARDS+=(
            "${MG21_BOARDS[0]}"
            "${MG24_BOARDS[0]}"
            "${MG26_BOARDS[0]}"
        )
    fi

    export CPPFLAGS="${CPPFLAGS-} -DNDEBUG"
    for ((idx = 0; idx < ${#BOARDS[@]}; idx = idx + 1)); do
        local board="${BOARDS[idx]}"
        echo "Building [${board}]..."
        "${repo_dir}"/script/build "$board" "${OT_OPTIONS[@]}"
    done
}

main "$@"
