#!/bin/bash
#
#  Copyright (c) 2020, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

set -euxo pipefail

# ==============================================================================
# Bash definitions
if [[ -n ${BASH_SOURCE[0]} ]]; then
    script_path="${BASH_SOURCE[0]}"
else
    script_path="$0"
fi

repo_dir="$(git rev-parse --show-toplevel)"
board="brdXXXXY"

# shellcheck source=script/efr32-definitions
source "${repo_dir}/script/efr32-definitions"

# shellcheck source=script/slc_cli
source "${repo_dir}/script/slc_cli"

# shellcheck source=script/util
source "${repo_dir}/script/util"

# ==============================================================================
OT_CMAKE_NINJA_TARGET=${OT_CMAKE_NINJA_TARGET-}

OT_OPTIONS=(
    "-DCMAKE_BUILD_TYPE=Release"
    "-DOT_DIAGNOSTIC=ON"
    "-DOT_EXTERNAL_HEAP=ON"
    "-DOT_SLAAC=ON"
)
readonly OT_OPTIONS

die()
{
    echo " ** ERROR: $1"
    exit 1
}

generate()
{
    if [ "${skip_generation}" = true ]; then
        return
    fi

    local slc_generated_projects_dir="${OT_CMAKE_BUILD_DIR}"/slc
    local openthread_slc_data="${OT_CMAKE_BUILD_DIR}"/slc/openthread_slc.data

    # Ensure GSDK extension folder exists
    [ -d ${sdk_dir}/extension ] && echo "Directory ${sdk_dir}/extension exists." || mkdir ${sdk_dir}/extension

    #
    EXTENSION_DIR=${sdk_dir}/extension/ot-efr32
    if [ ! -L "$EXTENSION_DIR" ]; then
        ln -s "${repo_dir}" "${EXTENSION_DIR}"
    fi

    run_slc -v 1 signature trust --sdk "${sdk_dir}" -data "${openthread_slc_data}"
    run_slc -v 1 signature trust --sdk "${sdk_dir}" -extpath "${sdk_dir}/extension/ot-efr32" -data "${openthread_slc_data}"

    if contains ".*-(ftd|mtd)" "${OT_CMAKE_NINJA_TARGET[@]}"; then
        # ==============================================================================================================
        # Generate openthread-efr32-soc and openthread-efr32-soc-mbedtls libs
        # ==============================================================================================================
        current_project_export_dir="${slc_generated_projects_dir}/soc"
        project_name="openthread-efr32-soc"

        run_slc -v 1 generate \
            -data "${openthread_slc_data}" \
            --sdk="${sdk_dir}" \
            --clear-cache \
            --project-file="${repo_dir}/src/platform_projects/openthread-efr32-soc.slcp" \
            --project-name="${project_name}" \
            --output-type=makefile \
            --no-copy \
            --export-templates="${repo_dir}"/slc/exporter_templates/platform_library \
            --export-destination="${current_project_export_dir}" \
            --with "${board}"

        # TODO: Remove this when slc supports generic jinja template generation
        mv "${current_project_export_dir}/${project_name}.Makefile" "${current_project_export_dir}/CMakeLists.txt"
        mv "${current_project_export_dir}/${project_name}.project.mak" "${current_project_export_dir}/${project_name}-mbedtls.cmake"
    fi
    if contains "ot-rcp-uart" "${OT_CMAKE_NINJA_TARGET[@]}"; then
        # ==============================================================================================================
        # Generate openthread-efr32-rcp-uart and openthread-efr32-rcp-uart-mbedtls libs
        # ==============================================================================================================
        current_project_export_dir="${slc_generated_projects_dir}/rcp_uart"
        project_name="openthread-efr32-rcp-uart"

        run_slc -v 1 generate \
            -data "${openthread_slc_data}" \
            --sdk="${sdk_dir}" \
            --clear-cache \
            --project-file="${repo_dir}/src/platform_projects/${project_name}.slcp" \
            --project-name="${project_name}" \
            --output-type=makefile \
            --no-copy \
            --export-templates="${repo_dir}"/slc/exporter_templates/platform_library \
            --export-destination="${current_project_export_dir}" \
            --with "${board}"

        # TODO: Remove this when slc supports generic jinja template generation
        mv "${current_project_export_dir}/${project_name}.Makefile" "${current_project_export_dir}/CMakeLists.txt"
        mv "${current_project_export_dir}/${project_name}.project.mak" "${current_project_export_dir}/${project_name}-mbedtls.cmake"
    fi
    if contains "ot-rcp-spi" "${OT_CMAKE_NINJA_TARGET[@]}"; then
        # ==============================================================================================================
        # Generate openthread-efr32-rcp-spi and openthread-efr32-rcp-spi-mbedtls libs
        # ==============================================================================================================
        current_project_export_dir="${slc_generated_projects_dir}/rcp_spi"
        project_name="openthread-efr32-rcp-spi"

        run_slc -v 1 generate \
            -data "${openthread_slc_data}" \
            --sdk="${sdk_dir}" \
            --clear-cache \
            --project-file="${repo_dir}/src/platform_projects/${project_name}.slcp" \
            --project-name="${project_name}" \
            --output-type=makefile \
            --no-copy \
            --export-templates="${repo_dir}"/slc/exporter_templates/platform_library \
            --export-destination="${current_project_export_dir}" \
            --with "${board}"

        # TODO: Remove this when slc supports generic jinja template generation
        mv "${current_project_export_dir}/${project_name}.Makefile" "${current_project_export_dir}/CMakeLists.txt"
        mv "${current_project_export_dir}/${project_name}.project.mak" "${current_project_export_dir}/${project_name}-mbedtls.cmake"
    fi
}

build_rcp_uart()
{
    builddir="${OT_CMAKE_BUILD_DIR:-$repo_dir/build/${board}}/openthread/rcp_uart"

    mkdir -p "${builddir}"
    cd "${builddir}"

    cmake \
        -GNinja \
        -DOT_FTD=OFF \
        -DOT_MTD=OFF \
        -DOT_RCP=ON \
        -DOT_APP_CLI=OFF \
        -DOT_APP_NCP=OFF \
        -DOT_APP_RCP=ON \
        -DOT_COMPILE_WARNING_AS_ERROR=ON \
        "$@" "${repo_dir}" \
        --graphviz=graph.dot

    ninja "ot-rcp"

    create_srec "${builddir}"
    cd "${repo_dir}"
}

build_rcp_spi()
{
    builddir="${OT_CMAKE_BUILD_DIR:-$repo_dir/build/${board}}/openthread/rcp_spi"

    mkdir -p "${builddir}"
    cd "${builddir}"

    cmake \
        -GNinja \
        -DOT_FTD=OFF \
        -DOT_MTD=OFF \
        -DOT_RCP=ON \
        -DOT_APP_CLI=OFF \
        -DOT_APP_NCP=OFF \
        -DOT_APP_RCP=ON \
        -DOT_COMPILE_WARNING_AS_ERROR=ON \
        -DOT_NCP_SPI=ON \
        "$@" "${repo_dir}" \
        --graphviz=graph.dot

    ninja "ot-rcp"
    create_srec "${builddir}"
    cd "${repo_dir}"

}

build_soc()
{
    builddir="${OT_CMAKE_BUILD_DIR:-$repo_dir/build/${board}}/openthread/soc"

    mkdir -p "${builddir}"
    cd "${builddir}"

    cmake \
        -GNinja \
        -DOT_FTD=ON \
        -DOT_MTD=ON \
        -DOT_RCP=OFF \
        -DOT_APP_CLI=ON \
        -DOT_APP_NCP=ON \
        -DOT_APP_RCP=OFF \
        -DOT_COMPILE_WARNING_AS_ERROR=ON \
        "$@" "${repo_dir}" \
        --graphviz=graph.dot

    ninja "${soc_targets[@]}"

    create_srec "${builddir}"
    cd "${repo_dir}"
}

main()
{
    local usage="usage: $0 [-h] [--skip-silabs-apps] <brdXXXXy> [-D<OT_XXXX=ON> -D<OT_YYYY=OFF>]"

    local skip_silabs_apps=false
    skip_generation=false
    # Parse flags
    optspec=":h-:"
    while getopts "$optspec" optchar; do
        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    skip-generation)
                        printf '\n\nSkipping SLC generation...\n\n' >&2
                        skip_generation=true
                        shift 1
                        ;;
                    skip-silabs-apps)
                        printf '\n\nSkipping silabs example apps...\n\n' >&2
                        skip_silabs_apps=true
                        shift 1
                        ;;
                    *)
                        echo "Unknown option --${OPTARG}" >&2
                        exit 2
                        ;;
                esac
                ;;
            h)
                echo "${usage}" >&2
                exit 2
                ;;
        esac
    done

    # Parse board
    lowercase_args=$(echo "$@" | tr '[:upper:]' '[:lower:]')
    board=$([[ ${lowercase_args} =~ (brd[0-9]{4}[a-z]{1}) ]] && echo "${BASH_REMATCH[1]}")

    # Find component file for latest revision of board
    local board_slcc
    board_slcc=$(efr32_get_board_slcc "${board}")

    # Determine board's platform and exit if unsupported
    local platform
    platform=$(
        grep -Eo 'board:device:.*' "${board_slcc}" \
            | sed "s/board:device:${efr32_device_regex}/efr32\2\4/" \
            | head -n 1
    )
    if [ -z "$platform" ]; then
        echo "Error parsing platform"
        exit 3
    fi

    efr32_check_platform "${platform}" || die "Unsupported platform ${platform}"

    shift

    local options=("${OT_OPTIONS[@]}")

    options+=("-DCMAKE_TOOLCHAIN_FILE=src/${platform}/arm-none-eabi.cmake")

    case "${platform}" in
        efr32mg1)
            OT_CMAKE_NINJA_TARGET=("ot-rcp-uart")
            ;;
        efr32mg12 | efr32mg13 | efr32mg21 | efr32mg24)
            OT_CMAKE_NINJA_TARGET=("ot-rcp-uart" "ot-rcp-spi" "ot-cli-ftd" "ot-cli-mtd" "ot-ncp-ftd" "ot-ncp-mtd")
            if [ "${skip_silabs_apps}" = false ]; then

                if [ "${skip_generation}" = true ]; then
                    "${repo_dir}"/script/build_example_apps --skip-generation "${board}" "$@"
                else
                    "${repo_dir}"/script/build_example_apps "${board}" "$@"
                fi
            fi
            ;;
    esac

    # Find slc-cli installation
    slc_init

    options+=("$@")
    export OT_CMAKE_BUILD_DIR="$repo_dir/build/${board}"

    # Generate the platform libs and related libs
    generate

    # Separate OT_CMAKE_NINJA_TARGET into two lists
    rcp_targets=()
    soc_targets=()
    for t in "${OT_CMAKE_NINJA_TARGET[@]}"; do [[ $t =~ .*rcp.* ]] && rcp_targets+=("$t") || soc_targets+=("$t"); done

    # Build ot-rcp targets
    if contains "ot-rcp-uart" "${rcp_targets[@]}"; then
        build_rcp_uart -DEFR32_PLATFORM="${platform}" -DBOARD="${board}" "${options[@]}"
    fi
    if contains "ot-rcp-spi" "${rcp_targets[@]}"; then
        build_rcp_spi -DEFR32_PLATFORM="${platform}" -DBOARD="${board}" "${options[@]}"
    fi
    # Build soc targets
    if [ ! ${#soc_targets[@]} -eq 0 ]; then
        build_soc -DEFR32_PLATFORM="${platform}" -DBOARD="${board}" "${options[@]}"
    fi

    ls -alh "${OT_CMAKE_BUILD_DIR}"/openthread/*/bin/*
}

cleanup()
{
    # Placeholder for any cleanup tasks
    :
}

trap cleanup EXIT

main "$@"
