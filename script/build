#!/bin/bash
#
#  Copyright (c) 2020, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

# ==============================================================================
# Bash definitions

if [[ -n ${BASH_SOURCE[0]} ]]; then
    script_path="${BASH_SOURCE[0]}"
else
    script_path="$0"
fi
script_dir="$(realpath "$(dirname "${script_path}")")"
repo_dir="$(dirname "${script_dir}")"
gsdk_dir="${repo_dir}/third_party/silabs/gecko_sdk"

# shellcheck source=script/efr32-definitions
source "${repo_dir}/script/efr32-definitions"

# shellcheck source=script/util
source "${repo_dir}/script/util"

set -euxo pipefail

# ==============================================================================
# Pre-build checks

set +x
echo "========================================================================================================="
echo "Check if the Git LFS package is installed"
echo "========================================================================================================="
set -x
if ! git lfs >/dev/null; then
    set +x
    echo "ERROR: Git LFS is not installed"
    echo
    echo "Please run './script/bootstrap packages'" to install it
    exit 3
fi

set +x
echo "========================================================================================================="
echo "Ensure Git LFS has been initialized for the GSDK"
echo "========================================================================================================="
set -x
if [ ! -f "$(git -C "${gsdk_dir}" rev-parse --git-dir)/hooks/pre-push" ]; then
    git -C "${gsdk_dir}" lfs install
fi

set +x
echo "========================================================================================================="
echo "Ensure GSDK submodule has been initialized and LFS objects have been pulled"
echo "========================================================================================================="
set -x
git submodule update --init "${gsdk_dir}"
git -C "${gsdk_dir}" lfs pull

# ==============================================================================
OT_CMAKE_NINJA_TARGET=${OT_CMAKE_NINJA_TARGET-}

OT_OPTIONS=(
    "-DCMAKE_BUILD_TYPE=Release"
    "-DOT_DIAGNOSTIC=ON"
    "-DOT_EXTERNAL_HEAP=ON"
    "-DOT_SLAAC=ON"
)
readonly OT_OPTIONS

generate()
{
    if [ "${skip_generation}" = true ]; then
        return
    fi

    local slc_generated_projects_dir="${OT_CMAKE_BUILD_DIR}"/slc

    if contains ".*-(ftd|mtd)" "${OT_CMAKE_NINJA_TARGET[@]}"; then
        set +x
        echo "========================================================================================================="
        echo "Generate openthread-efr32-soc and openthread-efr32-soc-mbedtls libs"
        echo "========================================================================================================="
        set -x
        "${repo_dir}/script/generate" \
            "${repo_dir}/slc/platform_projects/openthread-efr32-soc.slcp" \
            "${slc_generated_projects_dir}/soc" \
            "${board}"
    fi
    if contains "ot-rcp-uart" "${OT_CMAKE_NINJA_TARGET[@]}"; then
        set +x
        echo "========================================================================================================="
        echo "Generate openthread-efr32-rcp-uart and openthread-efr32-rcp-uart-mbedtls libs"
        echo "========================================================================================================="
        set -x
        "${repo_dir}/script/generate" \
            "${repo_dir}/slc/platform_projects/openthread-efr32-rcp-uart.slcp" \
            "${slc_generated_projects_dir}/rcp_uart" \
            "${board}"
    fi
    if contains "ot-rcp-spi" "${OT_CMAKE_NINJA_TARGET[@]}"; then
        set +x
        echo "========================================================================================================="
        echo "Generate openthread-efr32-rcp-spi and openthread-efr32-rcp-spi-mbedtls libs"
        echo "========================================================================================================="
        set -x
        "${repo_dir}/script/generate" \
            "${repo_dir}/slc/platform_projects/openthread-efr32-rcp-spi.slcp" \
            "${slc_generated_projects_dir}/rcp_spi" \
            "${board}"
    fi
}

build_rcp_uart()
{
    set +x
    echo "======================================================================"
    echo "Building ot-rcp (UART):"
    echo "======================================================================"
    set -x
    builddir="${OT_CMAKE_BUILD_DIR:-$repo_dir/build/${board}}/openthread/rcp_uart"

    mkdir -p "${builddir}"
    cd "${builddir}"

    cmake \
        -GNinja \
        -DOT_FTD=OFF \
        -DOT_MTD=OFF \
        -DOT_RCP=ON \
        -DOT_APP_CLI=OFF \
        -DOT_APP_NCP=OFF \
        -DOT_APP_RCP=ON \
        -DOT_COMPILE_WARNING_AS_ERROR=ON \
        "$@" "${repo_dir}" \
        --graphviz=graph.dot

    ninja "ot-rcp"
    create_srec "${builddir}"
    cd "${repo_dir}"
}

build_rcp_spi()
{
    set +x
    echo "======================================================================"
    echo "Building ot-rcp (SPI)"
    echo "======================================================================"
    set -x
    builddir="${OT_CMAKE_BUILD_DIR:-$repo_dir/build/${board}}/openthread/rcp_spi"

    mkdir -p "${builddir}"
    cd "${builddir}"

    cmake \
        -GNinja \
        -DOT_FTD=OFF \
        -DOT_MTD=OFF \
        -DOT_RCP=ON \
        -DOT_APP_CLI=OFF \
        -DOT_APP_NCP=OFF \
        -DOT_APP_RCP=ON \
        -DOT_COMPILE_WARNING_AS_ERROR=ON \
        -DOT_NCP_SPI=ON \
        "$@" "${repo_dir}" \
        --graphviz=graph.dot

    ninja "ot-rcp"
    create_srec "${builddir}"
    cd "${repo_dir}"
}

build_soc()
{
    set +x
    echo "======================================================================"
    echo "Building SoC apps:"
    for t in "${soc_targets[@]}"; do
        echo " - ${t}"
    done
    echo "======================================================================"
    set -x

    builddir="${OT_CMAKE_BUILD_DIR:-$repo_dir/build/${board}}/openthread/soc"

    mkdir -p "${builddir}"
    cd "${builddir}"

    cmake \
        -GNinja \
        -DOT_FTD=ON \
        -DOT_MTD=ON \
        -DOT_RCP=OFF \
        -DOT_APP_CLI=ON \
        -DOT_APP_NCP=ON \
        -DOT_APP_RCP=OFF \
        -DOT_COMPILE_WARNING_AS_ERROR=ON \
        "$@" "${repo_dir}" \
        --graphviz=graph.dot

    ninja "${soc_targets[@]}"

    create_srec "${builddir}"
    cd "${repo_dir}"
}

main()
{
    local usage="usage: $0 [-h] [--skip-silabs-apps] <brdXXXXy> [-D<OT_XXXX=ON> -D<OT_YYYY=OFF>]"

    local skip_silabs_apps=false
    skip_generation=false
    # Parse flags
    optspec=":h-:"
    while getopts "$optspec" optchar; do
        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    skip-generation)
                        printf '\n\nSkipping SLC generation...\n\n' >&2
                        skip_generation=true
                        shift 1
                        ;;
                    skip-silabs-apps)
                        printf '\n\nSkipping silabs example apps...\n\n' >&2
                        skip_silabs_apps=true
                        shift 1
                        ;;
                    *)
                        echo "Unknown option --${OPTARG}" >&2
                        exit 2
                        ;;
                esac
                ;;
            h)
                echo "${usage}" >&2
                exit 2
                ;;
        esac
    done

    # Add a vendor slc extension if the path to one is defined
    if [ -n "${VENDOR_EXTENSION-}" ]; then
        echo "Vendor SLC extension found: ${VENDOR_EXTENSION}"
        parse_configuration "${VENDOR_EXTENSION}"
        echo " - Board: ${board}"
    else
        # Parse board
        lowercase_args=$(echo "$@" | tr '[:upper:]' '[:lower:]')
        board=$([[ ${lowercase_args} =~ (brd[0-9]{4}[a-z]{1}) ]] && echo "${BASH_REMATCH[1]}")
        shift
    fi

    platform=$(efr32_get_platform "${board}")
    efr32_check_platform "${platform}" || die "Unsupported platform ${platform}"

    local options=("${OT_OPTIONS[@]}")

    options+=("-DCMAKE_TOOLCHAIN_FILE=src/${platform}/arm-none-eabi.cmake")

    if [ -z "${OT_CMAKE_NINJA_TARGET}" ]; then
        case "${platform}" in
            efr32mg1)
                OT_CMAKE_NINJA_TARGET=("ot-rcp-uart")
                skip_silabs_apps=true
                ;;
            efr32mg12 | efr32mg13 | efr32mg21 | efr32mg24)
                OT_CMAKE_NINJA_TARGET=("ot-rcp-uart" "ot-rcp-spi" "ot-cli-ftd" "ot-cli-mtd" "ot-ncp-ftd" "ot-ncp-mtd")
                ;;
        esac
    fi

    options+=("$@")
    export OT_CMAKE_BUILD_DIR="$repo_dir/build/${board}"

    # Generate the platform libs and related libs
    if [ -n "${VENDOR_EXTENSION-}" ]; then
        "${VENDOR_EXTENSION}"/script/generate
        options+=("-DVENDOR_EXTENSION=${VENDOR_EXTENSION}")

        # TODO: Fix 'script/build_example_apps' so that it works with vendor platform libs
        skip_silabs_apps=true
    else
        generate
    fi

    # Separate OT_CMAKE_NINJA_TARGET into two lists
    rcp_targets=()
    soc_targets=()
    for t in "${OT_CMAKE_NINJA_TARGET[@]}"; do [[ $t =~ .*rcp.* ]] && rcp_targets+=("$t") || soc_targets+=("$t"); done

    # Build ot-rcp targets
    if contains "ot-rcp-uart" "${rcp_targets[@]-}"; then
        build_rcp_uart -DEFR32_PLATFORM="${platform}" -DBOARD="${board}" "${options[@]}"
    fi
    if contains "ot-rcp-spi" "${rcp_targets[@]-}"; then
        build_rcp_spi -DEFR32_PLATFORM="${platform}" -DBOARD="${board}" "${options[@]}"
    fi
    # Build soc targets
    if [ ! ${#soc_targets[@]} -eq 0 ]; then
        build_soc -DEFR32_PLATFORM="${platform}" -DBOARD="${board}" "${options[@]}"
    fi

    # Build silabs apps
    if [ "${skip_silabs_apps}" = false ]; then
        local before_flags=()
        local after_flags=()

        if [ "${skip_generation}" = true ]; then
            before_flags+=("--skip-generation")
        fi

        "${repo_dir}"/script/build_example_apps "${before_flags[@]-}" "${board}" "${after_flags[@]-}" "$@"

    fi

    ls -alh "${OT_CMAKE_BUILD_DIR}"/openthread/*/bin/*

}

cleanup()
{
    # Placeholder for any cleanup tasks
    :
}

trap cleanup EXIT

main "$@"
