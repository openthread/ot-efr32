#!/bin/bash
#
#  Copyright (c) 2021, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

if [[ -n ${BASH_SOURCE[0]} ]]; then
    script_path="${BASH_SOURCE[0]}"
else
    script_path="$0"
fi

script_dir="$(dirname "$(realpath "$script_path")")"
repo_dir="$(dirname "$script_dir")"

efr32_get_platforms()
{
    if [ $# -ne 0 ]; then
        printf "Gets a list of platforms\n\nUsage:\n\t%s\n" "$(basename "$0")" >&2
        return 1
    fi

    cd "$repo_dir"/src/ || return
    local platforms=(*efr32*/)
    echo "${platforms[@]%/}"
}

efr32_check_platform()
{
    # Checks if a value is a valid efr32 platform
    #
    # Arg $1 -- value
    if [ -z "$1" ] || [ $# -ne 1 ]; then
        printf "Checks if a value is a valid efr32 platform\n\nUsage:\n\t%s <value> \n" "$0" >&2
        return 1
    fi

    local match=false
    local platform="$1"

    for efr32_platform in $(efr32_get_platforms); do
        if [[ $efr32_platform == "$platform" ]]; then
            match=true
            break
        fi
    done

    if ! $match; then
        printf "ERROR: Invalid platform\nValid platforms:   %s\n" "$(efr32_get_platforms)" >&2
        return 2
    fi
    return 0
}

efr32_get_boards()
{
    # Gets a list of boards for a given platform
    #
    # Arg $1 -- efr32 platform
    if [ -z "$1" ] || [ $# -ne 1 ]; then
        printf "Gets a list of boards for a given platform\n\nUsage:\n\t%s <efr32_platform> \n" "$(basename "$0")" >&2
        return 1
    fi

    local platform="$1"

    efr32_check_platform "$platform" \
        && local platform_dir="$repo_dir/src/$platform" \
        && find "$platform_dir" -type d -name 'brd*' -exec basename {} \; | sort
}

efr32_get_jlink_device()
{
    # Gets the J-Link device type for a efr32 platform
    #
    # Arg $1 -- efr32 platform
    if [ -z "$1" ] || [ $# -ne 1 ]; then
        printf "Gets the J-Link device type for a efr32 platform\n\nUsage:\n\t%s <efr32_platform> \n" "$(basename "$0")" >&2
        return 1
    fi

    local platform="$1"
    efr32_check_platform "$platform" \
        && case $platform in
            "efr32mg1")
                echo "EFR32MG1PxxxF256"
                ;;
            "efr32mg12")
                echo "EFR32MG12PxxxF1024"
                ;;
            "efr32mg13")
                echo "EFR32MG13PxxxF1024"
                ;;
            "efr32mg21")
                echo "EFR32MG21AxxxF1024"
                ;;
        esac
}
