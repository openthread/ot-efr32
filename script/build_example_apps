#!/bin/bash
#
#  Copyright (c) 2020, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

set -euxo pipefail

# ==============================================================================
# Bash definitions
if [[ -n ${BASH_SOURCE[0]} ]]; then
    script_path="${BASH_SOURCE[0]}"
else
    script_path="$0"
fi

script_dir="$(dirname "$(realpath "$script_path")")"
repo_dir="$(dirname "$script_dir")"
board="brdXXXXY"

# shellcheck source=script/efr32-definitions
source "$script_dir/efr32-definitions"

# shellcheck source=script/slc_cli
source "$script_dir/slc_cli"

# shellcheck source=script/util
source "$script_dir/util"

# ==============================================================================
OT_CMAKE_NINJA_TARGET=${OT_CMAKE_NINJA_TARGET-}

OT_OPTIONS=(
    "-DCMAKE_BUILD_TYPE=Release"
    "-DOT_DIAGNOSTIC=ON"
    "-DOT_EXTERNAL_HEAP=ON"
    "-DOT_PING_SENDER=ON"
    "-DOT_SLAAC=ON"
)
readonly OT_OPTIONS

die()
{
    echo " ** ERROR: $1"
    exit 1
}

generate()
{
    if [ "${skip_generation}" = true ]; then
        return
    fi

    local slc_generated_projects_dir="${OT_CMAKE_BUILD_DIR}"/slc
    local openthread_slc_data="${OT_CMAKE_BUILD_DIR}"/slc/openthread_slc.data
    local cmake_library="$1"
    shift

    run_slc -v 1 signature trust --sdk "${sdk_dir}" -data "${openthread_slc_data}"

    if [[ ${cmake_library} == "openthread-efr32-soc-with-buttons" ]]; then
        # ==============================================================================================================
        # Generate openthread-efr32-soc-with-buttons and openthread-efr32-soc-with-buttons-mbedtls libs
        # ==============================================================================================================
        current_project_export_dir="${slc_generated_projects_dir}/soc-with-buttons"
        project_name="openthread-efr32-soc-with-buttons"

        run_slc -v 1 generate \
            -data "${openthread_slc_data}" \
            --sdk="${sdk_dir}" \
            --clear-cache \
            --project-file="${repo_dir}/src/platform_projects/openthread-efr32-soc-with-buttons.slcp" \
            --project-name="${project_name}" \
            --output-type=makefile \
            --no-copy \
            --export-templates="${repo_dir}"/third_party/silabs/slc/exporter_templates/platform_library \
            --export-destination="${current_project_export_dir}" \
            --with "${board}"

        # TODO: Remove this when slc supports generic jinja template generation
        mv "${current_project_export_dir}/${project_name}.Makefile" "${current_project_export_dir}/CMakeLists.txt"
        mv "${current_project_export_dir}/${project_name}.project.mak" "${current_project_export_dir}/${project_name}-mbedtls.cmake"

        echo "${current_project_export_dir}" >>"${slc_generated_projects_dir}/generated_projects.txt"

    elif [[ ${cmake_library} == "openthread-efr32-soc-with-buttons-power-manager" ]]; then
        # ==============================================================================================================
        # Generate openthread-efr32-soc-with-buttons-power-manager and openthread-efr32-soc-with-buttons-power-manager-mbedtls libs
        # ==============================================================================================================
        current_project_export_dir="${slc_generated_projects_dir}/soc-with-buttons-power-manager"
        project_name="openthread-efr32-soc-with-buttons-power-manager"

        run_slc -v 1 generate \
            -data "${openthread_slc_data}" \
            --sdk="${sdk_dir}" \
            --clear-cache \
            --project-file="${repo_dir}/src/platform_projects/openthread-efr32-soc-with-buttons.slcp" \
            --project-name="${project_name}" \
            --output-type=makefile \
            --no-copy \
            --export-templates="${repo_dir}"/third_party/silabs/slc/exporter_templates/platform_library \
            --export-destination="${current_project_export_dir}" \
            --with "${board}",power_manager

        # TODO: Remove this when slc supports generic jinja template generation
        mv "${current_project_export_dir}/${project_name}.Makefile" "${current_project_export_dir}/CMakeLists.txt"
        mv "${current_project_export_dir}/${project_name}.project.mak" "${current_project_export_dir}/${project_name}-mbedtls.cmake"

        echo "${current_project_export_dir}" >>"${slc_generated_projects_dir}/generated_projects.txt"

    fi
}

create_srec()
{
    local executable_flag

    if [ "$(uname)" = 'Linux' ]; then
        executable_flag=(-executable)
    elif [ "$(uname)" = 'Darwin' ]; then
        executable_flag=(-perm +111)
    fi

    find "$1" -type f "${executable_flag[@]}" -not -name '*.*' -exec arm-none-eabi-objcopy -O srec {} {}.s37 \; -exec ls -alh {} {}.s37 \;
}

build_example_app()
{
    local example_app_ninja_target=${1-}
    local ot_platform_lib=${2-}
    shift 2

    # Generate the platform lib and related libs
    generate "${ot_platform_lib}"

    builddir="${OT_CMAKE_BUILD_DIR}/examples/${example_app_ninja_target}"

    mkdir -p "${builddir}"
    cd "${builddir}"

    cmake -GNinja \
        -DOT_COMPILE_WARNING_AS_ERROR=ON \
        -DOT_PLATFORM_LIB="${ot_platform_lib}" \
        -DOT_EXTERNAL_MBEDTLS="${ot_platform_lib}-mbedtls" \
        -DOT_APP_CLI=OFF \
        -DOT_APP_NCP=OFF \
        -DOT_APP_RCP=OFF \
        "$@" \
        "${repo_dir}"

    ninja "${example_app_ninja_target}"

    create_srec "${builddir}"
    cd "${repo_dir}"
}

main()
{
    local usage="usage: $0 [-h] [--skip-silabs-apps] <efr32 platform> -DBOARD=<brdXXXXy> [-D<OT_XXXX=ON> -D<OT_YYYY=OFF>]"

    skip_generation=false
    # Parse flags
    optspec=":h-:"
    while getopts "$optspec" optchar; do
        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    skip-generation)
                        printf '\n\nSkipping SLC generation...\n\n' >&2
                        skip_generation=true
                        shift 1
                        ;;
                    *)
                        echo "Unknown option --${OPTARG}" >&2
                        exit 2
                        ;;
                esac
                ;;
            h)
                echo "${usage}" >&2
                exit 2
                ;;
        esac
    done

    # Parse board
    lowercase_args=$(echo "$@" | tr '[:upper:]' '[:lower:]')
    board=$([[ ${lowercase_args} =~ (brd[0-9]{4}[a-z]{1}) ]] && echo "${BASH_REMATCH[1]}")

    # Find component file for latest revision of board
    local board_slcc
    board_slcc=$(efr32_get_board_slcc "${board}")

    # Determine board's platform and exit if unsupported
    local platform
    platform=$(
        grep -Eo 'board:device:.*' "${board_slcc}" \
            | sed "s/board:device:${efr32_device_regex}/efr32\2\4/" \
            | head -n 1
    )
    if [ -z "$platform" ]; then
        echo "Error parsing platform"
        exit 3
    fi

    efr32_check_platform "${platform}" || die "Unsupported platform ${platform}"

    shift

    local options=("${OT_OPTIONS[@]}")

    options+=("-DCMAKE_TOOLCHAIN_FILE=src/${platform}/arm-none-eabi.cmake")

    # Find slc-cli installation
    slc_init

    options+=("$@")
    export OT_CMAKE_BUILD_DIR="$repo_dir/build/${board}"

    build_example_app sleepy-demo-ftd openthread-efr32-soc-with-buttons \
        -DEFR32_PLATFORM="${platform}" -DBOARD="${board}" "${options[@]}"
    build_example_app sleepy-demo-mtd openthread-efr32-soc-with-buttons-power-manager \
        -DEFR32_PLATFORM="${platform}" -DBOARD="${board}" "${options[@]}"

    ls -alh "${OT_CMAKE_BUILD_DIR}"/examples/sleepy-demo-ftd/bin/* \
        "${OT_CMAKE_BUILD_DIR}"/examples/sleepy-demo-mtd/bin/*
}

main "$@"
